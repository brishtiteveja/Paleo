r_i <- r_i + 1
}
cols[[cnum]]$content <- column
cnum <- cnum + 1
}
}
else if (ct == 'point') {
cnum <- 1
for (r in rows) {
cols[[cnum]] <- list(name = c(), content=list())
colname <- dfxl[[c[1]]][r-1]
cols[[cnum]]$name <- colname
r_i <- r + 1
column <- list()
while(TRUE) {
age <- dfxl[[c[2]]][r_i]
if (is.na(age)) {
break
}
name <- dfxl[[c[3]]][r_i]
popup <- dfxl[[c[5]]][r_i]
column$age <- c(column$age, as.numeric(age))
column$name <- c(column$name, name) # actually value
column$popup <- c(column$popup, popup)
r_i <- r_i + 1
}
cols[[cnum]]$content <- column
cnum <- cnum + 1
}
}
columns[[ct]] <- cols
}
get_main_region_name <- function(col_name) {
if (col_name %in% regional_columns) {
return(col_name)
} else {
for(region in regional_columns) {
# number of sub-regions
sub_region_num <- length(regional_column_list[[region]])
if (sub_region_num == 0)
next
sub_regions <- names(regional_column_list[[region]][1:sub_region_num])
if (col_name %in% sub_regions)
return(region)
else {
for(sub_region_n in sub_regions) {
sub_region <- regional_column_list[[region]][[sub_region_n]]
sub_sub_regions <- names(sub_region)
sub_sub_region_num <- length(sub_sub_regions)
if (sub_sub_region_num == 0)
next
if (col_name %in% sub_sub_regions)
return(region)
for(sub_sub_region_n in sub_sub_regions) {
sub_sub_sub_regions <- regional_column_list[[region]][[sub_region_n]][[sub_sub_region_n]]
sub_sub_sub_region_num <- length(sub_sub_sub_regions)
if (sub_sub_sub_region_num == 0)
next
if (col_name %in% sub_sub_sub_regions)
return(region)
}
}
}
}
}
return(NA)
}
not_column <- function(col_name) {
if (col_name == '_METACOLUMN_OFF')
return(TRUE)
else if (col_name == 'off' || col_name == 'on') {
return(TRUE)
} else {
# # column width
m <- regexec("^[0-9]+$",col_name)
ml <- regmatches(col_name, m)
if (length(ml[[1]]) == 1) {
return(TRUE)
}
# color code
m <- regexec("([0-9])+/([0-9])+/([0-9])+",col_name)
ml <- regmatches(col_name, m)
if (length(ml[[1]]) != 0) {
return(TRUE)
}
return(FALSE)
}
}
# Regional Columns
regional_columns <- c('Africa', 'Eastern Mediterranean', 'Middle East to India',
'East Asia and Oceania', 'Europe', 'Arctic and Subarctic',
'Northwest and Canada', 'North America', 'Middle America',
'South America')
regional_column_list <- list()
region_info_rows <- which(dfxl[[c[2]]] == ':')
for (r in region_info_rows) {
region <- dfxl[[c[1]]][r]
if (region %in% regional_columns) {
regional_column_list[[region]] <- list()
} else {
next
}
sub_regions <- list()
for (rc in c[3:12]) {
sub_region_n <- dfxl[[rc]][r]
if(!is.null(sub_region_n) && !is.na(sub_region_n) &&
!not_column(sub_region_n)) {
sub_regions[[sub_region_n]] <- list()
# Get sub sub region row number
sr <- which(dfxl[[c[1]]] == sub_region_n)
if (length(sr) == 0 && dfxl[[c[2]]][sr] != ":") {
sub_regions[[sub_region_n]] <- list(sub_region_n)
next
} else {
sub_sub_regions <- list()
}
for (src in c[3:12]) {
sub_sub_region_n <- dfxl[[src]][sr]
if(!is.null(sub_sub_region_n) && !is.na(sub_sub_region_n) &&
!not_column(sub_sub_region_n)) {
sub_sub_regions[[sub_sub_region_n]] <- list()
# Get sub sub sub region row number
ssr <- which(dfxl[[c[1]]] == sub_sub_region_n)
if (length(ssr) == 0 || dfxl[[c[2]]][ssr] != ":") {
sub_sub_regions[[sub_sub_region_n]] <- list(sub_sub_region_n)
next
} else {
sub_sub_sub_regions <- list()
}
for(ssrc in c[3:12]) {
sub_sub_sub_region_n <- dfxl[[ssrc]][ssr]
if (!is.null(sub_sub_sub_region_n) && !is.na(sub_sub_sub_region_n) &&
!not_column((sub_sub_sub_region_n))) {
# Assuming there's no more level
sub_sub_sub_regions[[sub_sub_sub_region_n]] <- sub_sub_sub_region_n
}
}
sub_sub_regions[[sub_sub_region_n]] <- sub_sub_sub_regions
}
}
sub_regions[[sub_region_n]] <- sub_sub_regions
}
}
regional_column_list[[region]] <- sub_regions
}
# Get column wise event numbers
dir <- proj_dir
events_by_col <- list()
event_names_by_col <- list()
ev_df_by_col <- list()
events_by_col_by_regions <- list()
event_names_by_col_by_regions <- list()
ev_df_by_regions <- list()
ev_df_by_col_by_regions <- list()
for(col_type in column_type) {
msg <- paste("Processing ", col_type, " column events.\n",
"----------------------------------------------------------------------",
sep="")
print(msg)
ncol <- length(columns[[col_type]])
msg <-paste("Total number of " , col_type , " columns = ", ncol, sep ="")
print(msg)
if (ncol == 0) {
msg <- paste("No column data or not extracted yet.")
next
}
start_age <- STARTING_AGE
end_age <- ENDING_AGE
age_diff <- AGE_SLIDE
events <- list()
event_names <- list()
event_types <- list()
events_by_regions <- list()
event_names_by_regions <- list()
while(start_age <= end_age) {
next_age <- start_age + age_diff
mid_age <- (start_age + next_age) / 2
key <- as.character(mid_age)
evs <- 0
ev_names <- c()
ev_types <- c()
# region wise event numbers
evs_by_regions <- list()
ev_names_by_regions <- list()
for(region in regional_columns) {
evs_by_regions[[region]] <- 0
ev_names_by_regions[[region]] <- c()
}
for(col in columns[[col_type]]){
cn <- length(col$content$age)
for (k in 1:cn) {
if (length(col$content) == 0)
next
a <- col$content$age[k]
n <- col$content$name[k]
t <- col$content$type[k]
if (a >= start_age && a < next_age) {
evs <- as.numeric(evs) + 1
ev_names <- c(ev_names, n)
ev_types <- c(ev_types, t)
# adding to the region
col_region <- get_main_region_name(col$name)
if(is.na(col_region)) {
#print(paste("Something is wrong with column ", col, " for region ", col_region, sep=""))
} else {
evs_by_regions[[col_region]] <- as.numeric(evs_by_regions[[col_region]]) + 1
ev_names_by_regions[[col_region]] <- c(ev_names_by_regions[[col_region]], n)
}
}
k <- k+1
}
}
events[[key]] <- evs
event_names[[key]] <- ev_names
if(col_type == 'event')
event_types[[key]] <- ev_types
events_by_regions[[key]] <- list()
event_names_by_regions[[key]] <- list()
for (region in regional_columns) {
events_by_regions[[key]][[region]] <- evs_by_regions[[region]]
event_names_by_regions[[key]][[region]] <- ev_names_by_regions[[region]]
}
start_age <- next_age
}
age <- as.numeric(names(events))
freq <- as.numeric(unlist(events))
ev_df <- data.frame(age = age, freq = freq)
msg <- paste("Saving age vs frequency plot.")
print(msg)
im_str <- paste(col_type, '_column_', AGE_SLIDE, '_mil_event_frequency', sep="")
image_fn <- paste(dir, 'images/', im_str, ".png", sep="")
# png(image_fn)
# plot(age, freq, main=im_str, t='l')
# dev.off()
#
# p <- plot_ly(data=ev_df,
#              x=~age, y=~freq,
#              type='scatter',
#              mode='lines',
#              line=list(color='black')) %>%
#      layout(title=im_str)
# print(p)
#
data_dir <- paste(dir, 'data/', sep="")
event_names_fn <- paste(col_type, '_column_', AGE_SLIDE, '_mil_event_names.txt', sep="")
fn0 <- paste(data_dir, event_names_fn, sep="")
msg <- paste("Writing event names in ", fn0, sep="")
print(msg)
sink(fn0)
print(event_names)
sink()
event_freq_datapack_file_name <- paste(col_type, '_column_every_', AGE_SLIDE,'_mil_event_frequencies_datapack.txt', sep="")
fn <- paste(data_dir, event_freq_datapack_file_name, sep="")
msg <- paste("Writing datapack ", fn, sep="")
print(msg)
sink(fn)
str <- 'format version:	1.3\nage units:	Ma\n'
writeLines(str)
str <- paste(col_type, ' Column ', AGE_SLIDE, ' Million Year Event Frequencies\tpoint\t150\t255/245/230', sep="")
writeLines(str)
nf <- length(freq)
for (l in 1:nf) {
a <- age[l]
f <- freq[l]
ln <- paste("\t", a, "\t", f, sep='')
writeLines(ln)
}
sink()
#file.show(fn)
event_names_by_col[[col_type]] <- event_names
events_by_col[[col_type]] <- events
ev_df_by_col[[col_type]] <- ev_df
events_by_col_by_regions[[col_type]] <- list()
event_names_by_col_by_regions[[col_type]] <- list()
ev_df_by_regions[[col_type]] <- list()
for (region in regional_columns) {
age_r <- c()
freq_r <- c()
events_r <- c()
event_names_r <- list()
for(age in names(events_by_regions)) {
events_r <- c(events_r, events_by_regions[[age]][[region]])
event_names_r[[age]] <- event_names_by_regions[[age]][[region]]
age_r <- c(age_r, as.numeric(age))
freq_r <- c(freq_r, as.numeric(events_by_regions[[age]][[region]]))
}
events_by_col_by_regions[[col_type]][[region]] <- events_r
event_names_by_col_by_regions[[col_type]][[region]] <- event_names_r
ev_df_by_regions[[col_type]][[region]] <- data.frame(age = age_r, freq = freq_r)
}
}
ev_c_r <- events_by_col_by_regions[['block']]
block_events_by_regions_mat <- matrix(unlist(ev_c_r), byrow = FALSE,
nrow=length(names(events_by_regions)),
ncol=length(regional_columns),
dimnames=list(names(events_by_regions), regional_columns))
ev_c_r <- events_by_col_by_regions[['event']]
event_events_by_regions_mat <- matrix(unlist(ev_c_r), byrow = FALSE,
nrow=length(names(events_by_regions)),
ncol=length(regional_columns),
dimnames=list(names(events_by_regions), regional_columns))
events
plot(events)
unlist(events)
names(unlist(events))
as.integer(names(unlist(events)))
as.double(names(unlist(events)))
yr = as.double(names(unlist(events)))
as.integer(unlist(events))
events
events_by_regions_mat <- block_events_by_regions_mat + event_events_by_regions_mat
# plot by regions
Xage <- as.numeric(rownames(events_by_regions_mat)) * 1000
E <- events_by_regions_mat
ev_df_by_col[['block']]
ev_df_by_col[['block']]
ev_df_by_col[['event']]
events_by_col[['block']]
yr = as.double(names(unlist(events_by_col[['block']])))
yr
yr = as.double((unlist(events_by_col[['block']])))
yr
ev = as.double((unlist(events_by_col[['block']])))
yr = as.double(names(unlist(events_by_col[['block']])))
plot(yr, ev)
plot(yr, ev, t='l')
ev_df_by_regions
colnames(ev_df_by_regions)
ev_c_r <- events_by_col_by_regions[['block']]
block_events_by_regions_mat <- matrix(unlist(ev_c_r), byrow = FALSE,
nrow=length(names(events_by_regions)),
ncol=length(regional_columns),
dimnames=list(names(events_by_regions), regional_columns))
ev_c_r <- events_by_col_by_regions[['event']]
event_events_by_regions_mat <- matrix(unlist(ev_c_r), byrow = FALSE,
nrow=length(names(events_by_regions)),
ncol=length(regional_columns),
dimnames=list(names(events_by_regions), regional_columns))
events_by_regions_mat <- block_events_by_regions_mat + event_events_by_regions_mat
# plot by regions
Xage <- as.numeric(rownames(events_by_regions_mat)) * 1000
E <- events_by_regions_mat
s <- 4
range <- c(s:length(Xage))
A <- Xage[range]
A <- A - 2020 # converting to AD from Ka
plot.new()
par(mfrow=c(4,3))
y_min = 0
y_max = 10
x_min = -1950
x_max = -5
i = 1
EV = E[,i][range]
par(mfrow=c(3,3))
plot(A, EV,  type='h', lwd=3, col=i, ylim=c(y_min, y_max), xlim=c(x_min, x_max),
xlab="Year(AD)",
ylab="Event count",
xaxt='n',
main=paste(regional_columns[i]))
axis(1, at=pretty(A), labels = rev(-pretty(A)))
i=2
EV = E[,i][range]
par(mfrow=c(1,1))
E
colnames(E)
plot(E)
dim(E)
plot(rownames(E), E[,1], t='l')
lines(rownames(E), E[,2], t='l')
lines(rownames(E), E[,3], t='l')
lines(rownames(E), E[,4], t='l')
lines(rownames(E), E[,5], t='l')
# draw in a single plot
plot(Xage*1000, events_by_regions_mat[,1], type='l',  col=1)
lines(Xage*1000, events_by_regions_mat[,2], type='l', col=2)
lines(Xage*1000, events_by_regions_mat[,3], type='l', col=3)
lines(Xage*1000, events_by_regions_mat[,4], type='l', col=4)
lines(Xage*1000, events_by_regions_mat[,5], type='l', col=5)
lines(Xage*1000, events_by_regions_mat[,6], type='l', col=6)
lines(Xage*1000, events_by_regions_mat[,7], type='l', col=7)
lines(Xage*1000, events_by_regions_mat[,8], type='l', col=8)
lines(Xage*1000, events_by_regions_mat[,9], type='l', col=9)
# draw in a single plot
Xage = as.double(rownames(events_by_regions_mat)) * 1000
Xage
plot(Xage, events_by_regions_mat[,1], type='l',  col=1, ylim = c(0,50))
lines(Xage, events_by_regions_mat[,2], type='l', col=2)
lines(Xage, events_by_regions_mat[,3], type='l', col=3)
lines(Xage, events_by_regions_mat[,4], type='l', col=4)
lines(Xage, events_by_regions_mat[,5], type='l', col=5)
lines(Xage, events_by_regions_mat[,6], type='l', col=6)
lines(Xage, events_by_regions_mat[,7], type='l', col=7)
lines(Xage, events_by_regions_mat[,8], type='l', col=8)
lines(Xage, events_by_regions_mat[,9], type='l', col=9)
lines(Xage, events_by_regions_mat[,10], type='l', col=10)
# draw in a single plot
Xage = as.double(rownames(events_by_regions_mat)) * 1000
plot(Xage, events_by_regions_mat[,1], type='l',  col=1, ylim = c(0,10))
lines(Xage, events_by_regions_mat[,2], type='l', col=2)
lines(Xage, events_by_regions_mat[,3], type='l', col=3)
lines(Xage, events_by_regions_mat[,4], type='l', col=4)
lines(Xage, events_by_regions_mat[,5], type='l', col=5)
lines(Xage, events_by_regions_mat[,6], type='l', col=6)
lines(Xage, events_by_regions_mat[,7], type='l', col=7)
lines(Xage, events_by_regions_mat[,8], type='l', col=8)
lines(Xage, events_by_regions_mat[,9], type='l', col=9)
lines(Xage, events_by_regions_mat[,10], type='l', col=10)
?par
# draw in a single plot
Xage = as.double(rownames(events_by_regions_mat)) * 1000
plot(Xage, events_by_regions_mat[,1], type='l',  col=1, lty=5,
ylim = c(0,10))
lines(Xage, events_by_regions_mat[,2], type='l', col=2, lty=5)
lines(Xage, events_by_regions_mat[,3], type='l', col=3, lty=5)
lines(Xage, events_by_regions_mat[,4], type='l', col=4, lty=5)
lines(Xage, events_by_regions_mat[,5], type='l', col=5, lty=5)
lines(Xage, events_by_regions_mat[,6], type='l', col=6, lty=5)
lines(Xage, events_by_regions_mat[,7], type='l', col=7, lty=5)
lines(Xage, events_by_regions_mat[,8], type='l', col=8, lty=5)
lines(Xage, events_by_regions_mat[,9], type='l', col=9, lty=5)
lines(Xage, events_by_regions_mat[,10], type='l', col=10, lty=5)
seq(1:10)
legend('topright', legend=colnames(events_by_regions_mat),
col=seq(1:10),
lty=1)
legend('topright', legend=colnames(events_by_regions_mat),
col=seq(1:10),
lty=1,
cex=0.5)
# draw in a single plot
Xage = as.double(rownames(events_by_regions_mat)) * 1000
plot(Xage, events_by_regions_mat[,1], type='l',  col=1, lty=5,
ylim = c(0,10))
lines(Xage, events_by_regions_mat[,2], type='l', col=2, lty=5)
lines(Xage, events_by_regions_mat[,3], type='l', col=3, lty=5)
lines(Xage, events_by_regions_mat[,4], type='l', col=4, lty=5)
plot(Xage, events_by_regions_mat[,1], type='l',  col=1, lty=5,
ylim = c(0,10),
xlab='Year (AD)',
ylab='Number of turnovers')
plot(Xage, events_by_regions_mat[,1], type='l',  col=1, lty=5,
ylim = c(0,10),
xlab='Year (AD)',
ylab='Number of turnovers',
main='Cultural turnovers for last 2000 years')
lines(Xage, events_by_regions_mat[,2], type='l', col=2, lty=5)
lines(Xage, events_by_regions_mat[,3], type='l', col=3, lty=5)
plot(Xage, events_by_regions_mat[,1], type='l',  col=1, lty=5,
ylim = c(0,10),
xlab='Year (AD)',
ylab='Number of turnovers',
main='Region wise cultural turnovers for last 2000 years')
lines(Xage, events_by_regions_mat[,2], type='l', col=2, lty=5)
lines(Xage, events_by_regions_mat[,3], type='l', col=3, lty=5)
lines(Xage, events_by_regions_mat[,4], type='l', col=4, lty=5)
plot(Xage, events_by_regions_mat[,1], type='l',  col=1, lty=5,
ylim = c(0,10),
xlab='Year (AD)',
ylab='Number of turnovers',
main='Regional cultural turnovers for last 2000 years')
lines(Xage, events_by_regions_mat[,2], type='l', col=2, lty=5)
lines(Xage, events_by_regions_mat[,3], type='l', col=3, lty=5)
lines(Xage, events_by_regions_mat[,4], type='l', col=4, lty=5)
lines(Xage, events_by_regions_mat[,5], type='l', col=5, lty=5)
lines(Xage, events_by_regions_mat[,6], type='l', col=6, lty=5)
lines(Xage, events_by_regions_mat[,7], type='l', col=7, lty=5)
lines(Xage, events_by_regions_mat[,8], type='l', col=8, lty=5)
lines(Xage, events_by_regions_mat[,9], type='l', col=9, lty=5)
lines(Xage, events_by_regions_mat[,10], type='l', col=10, lty=5)
legend('topright', legend=colnames(events_by_regions_mat),
col=seq(1:10),
lty=1,
cex=0.5)
# draw in a single plot
Xage = as.double(rownames(events_by_regions_mat)) * 1000
plot(Xage, events_by_regions_mat[,1], type='l',  col=1, lty=1,
ylim = c(0,10),
xlab='Year (AD)',
ylab='Number of turnovers',
main='Regional cultural turnovers for last 2000 years')
lines(Xage, events_by_regions_mat[,2], type='l', col=2, lty=2)
lines(Xage, events_by_regions_mat[,3], type='l', col=3, lty=3)
lines(Xage, events_by_regions_mat[,4], type='l', col=4, lty=4)
lines(Xage, events_by_regions_mat[,5], type='l', col=5, lty=5)
lines(Xage, events_by_regions_mat[,6], type='l', col=6, lty=6)
lines(Xage, events_by_regions_mat[,7], type='l', col=7, lty=7)
lines(Xage, events_by_regions_mat[,8], type='l', col=8, lty=8)
lines(Xage, events_by_regions_mat[,9], type='l', col=9, lty=9)
lines(Xage, events_by_regions_mat[,10], type='l', col=10, lty=10)
# draw in a single plot
lcol = seq(1:10)
ltype = seq(1:10)
Xage = as.double(rownames(events_by_regions_mat)) * 1000
plot(Xage, events_by_regions_mat[,1], type='l',  col=lcol[1], lty=ltype[1],
ylim = c(0,10),
xlab='Year (AD)',
ylab='Number of turnovers',
main='Regional cultural turnovers for last 2000 years')
lines(Xage, events_by_regions_mat[,2], type='l', col=lcol[2], lty=ltype[2])
lines(Xage, events_by_regions_mat[,3], type='l', col=lcol[3], lty=ltype[3])
lines(Xage, events_by_regions_mat[,4], type='l', col=lcol[4], lty=ltype[4])
lines(Xage, events_by_regions_mat[,5], type='l', col=lcol[5], lty=ltype[5])
lines(Xage, events_by_regions_mat[,6], type='l', col=lcol[6], lty=ltype[6])
lines(Xage, events_by_regions_mat[,7], type='l', col=lcol[7], lty=ltype[7])
lines(Xage, events_by_regions_mat[,8], type='l', col=lcol[8], lty=ltype[8])
lines(Xage, events_by_regions_mat[,9], type='l', col=lcol[9], lty=ltype[9])
lines(Xage, events_by_regions_mat[,10], type='l', col=lcol[10], lty=ltype[10])
legend('topright', legend=colnames(events_by_regions_mat),
col=lcol,
lty=ltype,
cex=0.5)
